name: Build Desktop Applications

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: macos-latest
                      target: x86_64-apple-darwin
                      artifact_name: texty-macos-x64
                      file_extension: .app
                    - platform: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_name: texty-linux-x64
                      file_extension: .AppImage
                    - platform: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: texty-windows-x64
                      file_extension: .msi

        runs-on: ${{ matrix.platform }}
        continue-on-error: true

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  cache: "yarn"

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install dependencies (Ubuntu)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev \
                    build-essential \
                    curl \
                    wget \
                    libssl-dev \
                    libgtk-3-dev \
                    libayatana-appindicator3-dev \
                    librsvg2-dev

            - name: Install dependencies (macOS)
              if: matrix.platform == 'macos-latest'
              run: |
                  brew install node
                  brew install yarn

            - name: Install dependencies (Windows)
              if: matrix.platform == 'windows-latest'
              run: |
                  choco install nodejs
                  choco install yarn

            - name: Install frontend dependencies
              run: yarn install --frozen-lockfile

            - name: Build frontend
              run: yarn build

            - name: Build Tauri application
              run: yarn tauri build
              env:
                  TARGET: ${{ matrix.target }}

            - name: List bundle contents
              run: |
                  echo "Bundle directory contents:"
                  find src-tauri/target/release/bundle/ -type f -name "*.AppImage" -o -name "*.app" -o -name "*.dmg" -o -name "*.msi" -o -name "*.deb" | head -20
                  echo "Artifact name: ${{ matrix.artifact_name }}"
                  echo "Platform: ${{ matrix.platform }}"

                  # Check for specific files we want to upload
                  echo "Checking for specific files:"
                  if [ "${{ matrix.platform }}" = "macos-latest" ]; then
                      ls -la src-tauri/target/release/bundle/dmg/ || echo "No dmg directory"
                  elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
                      ls -la src-tauri/target/release/bundle/appimage/ || echo "No appimage directory"
                      ls -la src-tauri/target/release/bundle/deb/ || echo "No deb directory"
                  elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
                      ls -la src-tauri/target/release/bundle/msi/ || echo "No msi directory"
                      ls -la src-tauri/target/release/bundle/updater/ || echo "No updater directory"
                  fi

            - name: Upload artifacts (macOS)
              if: matrix.platform == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name || 'texty-macos-x64' }}
                  path: src-tauri/target/release/bundle/dmg/*.dmg
                  retention-days: 30
              continue-on-error: true

            - name: Upload artifacts (Linux)
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name || 'texty-linux-x64' }}
                  path: |
                      src-tauri/target/release/bundle/appimage/*.AppImage
                      src-tauri/target/release/bundle/deb/*.deb
                  retention-days: 30
              continue-on-error: true

            - name: Upload artifacts (Windows)
              if: matrix.platform == 'windows-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name || 'texty-windows-x64' }}
                  path: |
                      src-tauri/target/release/bundle/msi/*.msi
                      src-tauri/target/release/bundle/updater/*.exe
                  retention-days: 30
              continue-on-error: true

    create-release:
        needs: build
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  draft: true
                  files: |
                      artifacts/texty-macos-x64/**/*
                      artifacts/texty-linux-x64/**/*
                      artifacts/texty-windows-x64/**/*
                  body: |
                      ## Desktop Applications

                      This release contains desktop applications for:
                      - **macOS**: `.app` bundle
                      - **Linux**: `.AppImage` file
                      - **Windows**: `.msi` installer

                      ### Installation Instructions

                      **macOS**: Download the `.app` file and drag it to your Applications folder
                      **Linux**: Download the `.AppImage` file, make it executable (`chmod +x filename.AppImage`), and run it
                      **Windows**: Download the `.msi` file and run the installer

                      ### Changes

                      See the commit history for detailed changes.
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
